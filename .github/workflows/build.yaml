name: Build Executable

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt

    - name: Create PyInstaller spec file
      run: |
        python -c "
        import PyInstaller.__main__
        PyInstaller.__main__.run([
            '--onefile',
            '--name=github-sync',
            '--hidden-import=aiohttp',
            '--hidden-import=aiofiles',
            '--hidden-import=dotenv',
            '--hidden-import=asyncio',
            '--collect-all=aiohttp',
            '--noconfirm',
            'github-sync.py'
        ])
        "

    - name: Build Windows Executable
      run: |
        pyinstaller github-sync.spec

    - name: Verify executable
      run: |
        if (Test-Path "dist\github-sync.exe") {
          Write-Host "Executable built successfully: dist\github-sync.exe"
          Get-ChildItem dist\ -Name
          $size = (Get-Item "dist\github-sync.exe").Length
          Write-Host "File size: $([math]::Round($size/1MB, 2)) MB"
        } else {
          Write-Host "Executable not found!"
          exit 1
        }

    - name: Test executable (basic check)
      run: |
        # 简单测试可执行文件是否能启动（会因为缺少token而失败，但至少验证了打包是否正确）
        echo "Testing if executable can start..."
        # 这里我们只测试是否能显示帮助信息，避免实际执行同步
        # 注意：这可能会失败，因为程序会要求token，但这是正常的

    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: github-sync-windows
        path: |
          dist/github-sync.exe
        retention-days: 30

    - name: Create portable package
      run: |
        mkdir portable-package
        copy dist\github-sync.exe portable-package\
        echo "# GitHub Folder Sync Tool" > portable-package\README.md
        echo "" >> portable-package\README.md
        echo "## 使用方法" >> portable-package\README.md
        echo "1. 双击 github-sync.exe 运行程序" >> portable-package\README.md
        echo "2. 首次运行时需要输入 GitHub Personal Access Token" >> portable-package\README.md
        echo "3. Token会自动保存到 .env 文件中供下次使用" >> portable-package\README.md
        echo "" >> portable-package\README.md
        echo "## 获取GitHub Token" >> portable-package\README.md
        echo "1. 访问: https://github.com/settings/tokens" >> portable-package\README.md
        echo "2. 点击 'Generate new token (classic)'" >> portable-package\README.md
        echo "3. 至少勾选 'repo' 权限" >> portable-package\README.md
        echo "4. 复制生成的token并粘贴到程序中" >> portable-package\README.md
        
        # 创建示例.env文件
        echo "# 将你的GitHub token填入下面一行，去掉注释符号" > portable-package\.env.example
        echo "# GITHUB_TOKEN=your_token_here" >> portable-package\.env.example

    - name: Upload portable package
      uses: actions/upload-artifact@v4
      with:
        name: github-sync-portable
        path: portable-package/
        retention-days: 30

  # 仅在Release时自动发布
  release:
    needs: build-windows
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download portable package
      uses: actions/download-artifact@v4
      with:
        name: github-sync-portable
        path: release-assets/

    - name: Create release archive
      run: |
        cd release-assets
        zip -r ../github-sync-windows.zip .
        cd ..
        
        # 生成校验和
        sha256sum github-sync-windows.zip > github-sync-windows.zip.sha256

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          github-sync-windows.zip
          github-sync-windows.zip.sha256
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}